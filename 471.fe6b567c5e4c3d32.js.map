{"version":3,"file":"471.fe6b567c5e4c3d32.js","mappings":"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","names":["EditorDashboardComponent","static","this","t","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","i0","_c0","_c1","_c2","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","DataJsonService","constructor","travelingSpiritsToJson","ts","stringify","map","d","date","guid","day","month","year","spirit","tree","spiritTreesToJson","trees","node","nodesToJson","nodes","item","c","h","sc","sh","ac","ec","nw","n","ne","itemsToJson","items","type","name","icon","level","array","JSON","undefined","Yz7","factory","ɵfac","providedIn","option_r3","_r11","node_r4","$implicit","ctx_r9","toggleConnection","_r15","ctx_r13","option_r17","EditorTravelingSpiritComponent_div_13_option_8_ng_container_3_Template","EditorTravelingSpiritComponent_div_13_div_1_Template","_r21","ctx_r20","EditorTravelingSpiritComponent_div_13_div_4_Template","$event","EditorTravelingSpiritComponent_div_13_option_8_Template","i_r5","ctx_r1","itemOptions","_r27","ctx_r26","copyToClipboard","ctx_r28","ctx_r29","ctx_r30","EditorTravelingSpiritComponent","dataService","dataJsonService","spiritOptions","Array","tsCount","travelingSpiritConfig","length","spiritConfig","filter","s","sort","a","b","localeCompare","lastDate","at","add","isoWeekday","format","formNodes","i","push","spiritChanged","forEach","lastTs","reverse","find","spiritTree","existingNodes","NodeHelper","all","nodeToFormNodes","ItemType","Special","createWingBuff","createHeart","createBlessing","direction","submit","tsVisits","alert","baseNode","formNodeToNodes","dayjs","Date","endDate","number","visit","console","log","result","value","getForClipboard","startI","indexOf","endI","lastIndexOf","substring","navigator","clipboard","writeText","newItems","guidMap","has","mainNode","defineNode","formNode","formNodeToNode","j","relativeNode","WingBuff","i1","i2","EditorTravelingSpiritComponent_option_5_Template","EditorTravelingSpiritComponent_div_13_Template","EditorTravelingSpiritComponent_div_16_Template","_r9","node_r2","ctx_r7","_r13","ctx_r11","_r17","ctx_r15","copyNodeToClipboard","EditorTreeComponent_div_4_div_1_Template","_r20","ctx_r19","EditorTreeComponent_div_4_div_4_Template","EditorTreeComponent_div_4_b_9_Template","i_r3","index","ctx_r21","itemInputChanged","ctx_r22","itemInputEnter","itemRef","_r30","ctx_r31","ctx_r32","_r2","ctx_r3","option_r1","routes","path","component","EditorTreeComponent","_dataService","_dataJsonService","_route","ngOnInit","copyTree","snapshot","queryParams","copy","get","itemConfig","event","target","jsonNode","getNodeFromJson","blur","key","fuzzysort","limit","obj","json","parse","i3","EditorTreeComponent_div_4_Template","EditorTreeComponent_div_7_Template","EditorShopComponent","returning","shopGuidChanged","copyShopGuid","shop","copyShop","iaps","iap","price","sp","newShop","EditorShopComponent_div_8_Template","EditorItemComponent","typeOptions","generate","iRevision","EditorItemComponent_option_4_Template","EditorRoutingModule","oAB","cJS","RouterModule","forChild","EditorModule","CommonModule","FormsModule","MatIconModule"],"sourceRoot":"webpack:///","sources":["./src/app/editor/components/dashboard/editor-dashboard.component.ts","./src/app/editor/components/dashboard/editor-dashboard.component.html","./node_modules/nanoid/index.browser.js","./src/app/services/data-json.service.ts","./src/app/editor/components/editor-traveling-spirit/editor-traveling-spirit.component.html","./src/app/editor/components/editor-traveling-spirit/editor-traveling-spirit.component.ts","./src/app/editor/components/editor-tree/editor-tree.component.html","./src/app/editor/components/editor-shop/editor-shop.component.html","./src/app/editor/components/editor-item/editor-item.component.html","./src/app/editor/editor-routing.module.ts","./src/app/editor/components/editor-tree/editor-tree.component.ts","./src/app/editor/components/editor-shop/editor-shop.component.ts","./src/app/editor/components/editor-item/editor-item.component.ts","./src/app/editor/editor.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-editor-dashboard',\n  templateUrl: './editor-dashboard.component.html',\n  styleUrls: ['./editor-dashboard.component.less']\n})\nexport class EditorDashboardComponent {\n\n}\n","<a [routerLink]=\"['/editor/ts']\">Create TS</a>\n<a [routerLink]=\"['/editor/tree']\">Create Spirit Tree</a>\n<a [routerLink]=\"['/editor/shop']\">Create Shop</a>\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { Injectable } from '@angular/core';\nimport dayjs from 'dayjs';\nimport { IItem } from '../interfaces/item.interface';\nimport { INode } from '../interfaces/node.interface';\nimport { ISpiritTree } from '../interfaces/spirit-tree.interface';\nimport { ITravelingSpirit } from '../interfaces/traveling-spirit.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataJsonService {\n\n  constructor() { }\n\n  travelingSpiritsToJson(ts: Array<ITravelingSpirit>): string {\n    return this.stringify(ts.map(ts => {\n      const d = ts.date;\n      return {\n        guid: ts.guid,\n        date: { day: d.date(), month: d.month() + 1, year: d.year() },\n        spirit: ts.spirit.guid,\n        tree: ts.tree.guid\n      };\n    }));\n  }\n\n  spiritTreesToJson(trees: Array<ISpiritTree>): string {\n    return this.stringify(trees.map(tree => {\n      return {\n        guid: tree.guid,\n        node: tree.node.guid\n      };\n    }));\n  }\n\n  nodesToJson(nodes: Array<INode>): string {\n    return this.stringify(nodes.map(node => {\n      return {\n        guid: node.guid,\n        item: node.item?.guid,\n        c: node.c,\n        h: node.h,\n        sc: node.sc,\n        sh: node.sh,\n        ac: node.ac,\n        ec: node.ec,\n        nw: node.nw?.guid,\n        n: node.n?.guid,\n        ne: node.ne?.guid\n      };\n    }));\n  }\n\n  itemsToJson(items: Array<IItem>): string {\n    return this.stringify(items.map(item => {\n      return {\n        guid: item.guid,\n        type: item.type,\n        name: item.name,\n        icon: item.icon,\n        level: item.level\n      };\n    }));\n  }\n\n  private stringify(array: Array<unknown>): string {\n    return JSON.stringify(array, undefined, 2);\n  }\n}\n","<div>\n  There are currently {{ tsCount }} TS registered. Add #{{ tsCount + 1 }} now.\n</div>\n\n<div>\n  Spirit:\n  <select class=\"mono\" [(ngModel)]=\"spirit\" (ngModelChange)=\"spiritChanged()\">\n    <option *ngFor=\"let option of spiritOptions\" [value]=\"option.guid\">{{ option.name }}</option>\n  </select>\n</div>\n\n<div>\n  Date:\n  <input type=\"date\" [(ngModel)]=\"date\">\n</div>\n\n<div>\n  Nodes<br/>\n\n  <div class=\"grid-container\">\n    <div class=\"grid-item\" *ngFor=\"let node of formNodes; let i = index;\">\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-nw\" [class.green]=\"node.nw\"\n        (click)=\"toggleConnection(node, 'nw')\">NW</div>\n      <div class=\"grid-item-connection grid-item-n\" [class.green]=\"node.n\"\n        (click)=\"toggleConnection(node, 'n')\">N</div>\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-ne\" [class.green]=\"node.ne\"\n        (click)=\"toggleConnection(node, 'ne')\">NE</div>\n\n      <div>\n        <select class=\"mono\" [(ngModel)]=\"node.item\">\n          <option value=\"\"></option>\n          <option *ngFor=\"let option of itemOptions\" [value]=\"option.guid\">\n            {{ option.name }}\n            <span>\n              <ng-container *ngIf=\"option.level\">({{option.level}})</ng-container>\n            </span>\n            <span>({{ option.guid }})</span>\n          </option>\n        </select>\n      </div>\n\n      <div>\n        <mat-icon svgIcon=\"candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.c\">\n        <mat-icon svgIcon=\"heart\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.h\">\n        <mat-icon svgIcon=\"ascended-candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.ac\">\n      </div>\n    </div>\n  </div>\n</div>\n\n<button type=\"button\" (click)=\"submit()\">Generate</button>\n\n<div *ngIf=\"result\">\n  <button type=\"button\" (click)=\"copyToClipboard('ts')\">\n    Copy TS\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('tree')\">\n    Copy Tree\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('nodes')\">\n    Copy Nodes\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('items')\">\n    Copy Items\n  </button>\n</div>\n","import { Component } from '@angular/core';\nimport dayjs from 'dayjs';\nimport { nanoid } from 'nanoid';\nimport { NodeHelper } from 'src/app/helpers/node-helper';\nimport { IItem, ItemType } from 'src/app/interfaces/item.interface';\nimport { INode } from 'src/app/interfaces/node.interface';\nimport { ISpiritTree } from 'src/app/interfaces/spirit-tree.interface';\nimport { ISpirit, SpiritType } from 'src/app/interfaces/spirit.interface';\nimport { ITravelingSpirit } from 'src/app/interfaces/traveling-spirit.interface';\nimport { DataJsonService } from 'src/app/services/data-json.service';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface IFormNode {\n  nw?: boolean;\n  n?: boolean;\n  ne?: boolean\n\n  item?: string;\n\n  c?: number;\n  h?: number;\n  ac?: number;\n}\n\n@Component({\n  selector: 'app-editor-traveling-spirit',\n  templateUrl: './editor-traveling-spirit.component.html',\n  styleUrls: ['./editor-traveling-spirit.component.less']\n})\nexport class EditorTravelingSpiritComponent {\n  tsCount: number;\n  spiritOptions = new Array<ISpirit>();\n  itemOptions = new Array<IItem>();\n\n  // Input\n  spirit?: string;\n  date?: string;\n\n  formNodes: Array<IFormNode>;\n\n  result?: ITravelingSpirit;\n\n  constructor(\n    private readonly dataService: DataService,\n    private readonly dataJsonService: DataJsonService\n  ) {\n      this.tsCount = dataService.travelingSpiritConfig.items.length;\n      this.spiritOptions = dataService.spiritConfig.items\n        .filter(s => s.type === 'Season')\n        .sort((a, b) => a.name.localeCompare(b.name));\n\n      const lastDate = dataService.travelingSpiritConfig.items.at(-1)!.date!;\n      this.date = lastDate.add(2, 'weeks').isoWeekday(4).format('YYYY-MM-DD');\n\n      this.formNodes = [];\n      for (let i = 0; i < 24; i++) { this.formNodes.push({\n        n: !((i+2) % 3)\n      }); }\n  }\n\n  spiritChanged(): void {\n    this.formNodes.forEach(n => n.item = undefined);\n\n    this.itemOptions = [];\n\n    // Find last nodes\n    const lastTs = [...this.dataService.travelingSpiritConfig.items].reverse().find(s => s.spirit.guid === this.spirit);\n    const spiritTree = this.dataService.spiritConfig.items.find(s => s.guid === this.spirit)?.tree;\n\n    let existingNodes: Array<INode> = [];\n\n    if (lastTs) {\n      existingNodes = NodeHelper.all(lastTs.tree.node);\n      this.formNodes = this.nodeToFormNodes(lastTs.tree.node);\n    } else if (spiritTree) {\n      // Filter out season-specifics.\n      existingNodes = NodeHelper.all(spiritTree.node).filter(s => {\n        if (s.item?.name === 'Season Heart') { return false; }\n        return true;\n      });\n    }\n\n    // Add items\n    this.itemOptions.push({ guid: 'DON\\'T PICK', name: '-- SPIRIT ITEMS --', type: ItemType.Special });\n    this.itemOptions.push(...existingNodes.filter(n => n.item).map(n => n.item!));\n\n    // Create new items\n    this.itemOptions.push({ guid: 'DON\\'T PICK', name: '-- NEW ITEMS --', type: ItemType.Special });\n    this.itemOptions.push(this.createWingBuff());\n    this.itemOptions.push(this.createHeart());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n  }\n\n  toggleConnection(node: any, direction: string) {\n    node[direction] = !node[direction];\n  }\n\n  submit(): void {\n    const spirit = this.spiritOptions.find(s => s.guid == this.spirit);\n    const tsVisits = this.dataService.travelingSpiritConfig.items.filter(ts => ts.spirit.guid === this.spirit).length;\n\n    if (!spirit) { alert('No spirit'); return; }\n\n    const baseNode = this.formNodeToNodes();\n    const nodes = NodeHelper.all(baseNode);\n\n    // Create tree\n    const tree: ISpiritTree = {\n      guid: nanoid(10),\n      node: nodes[0]\n    };\n\n    // Create ts\n    const date = dayjs(new Date(this.date!));\n    const ts: ITravelingSpirit = {\n      guid: nanoid(10),\n      date: date,\n      endDate: date.add(4, 'days'),\n      spirit,\n      tree,\n      number: this.tsCount + 1,\n      visit: tsVisits + 1\n    };\n\n    console.log('ts generated', ts);\n\n    this.result = ts;\n  }\n\n  copyToClipboard(type: string): void {\n    let value = this.getForClipboard(type);\n    if (!value) { return; }\n    const startI = value.indexOf('{');\n    const endI = value.lastIndexOf('}');\n    value = value.substring(startI, endI + 1) + ',';\n    navigator.clipboard.writeText(value);\n  }\n\ngetForClipboard(type: string): string | undefined {\n    switch (type) {\n      case 'ts':\n        return this.dataJsonService.travelingSpiritsToJson([this.result!]);\n      case 'tree':\n        return this.dataJsonService.spiritTreesToJson([this.result!.tree]);\n      case 'nodes':\n        return this.dataJsonService.nodesToJson(NodeHelper.all(this.result!.tree.node));\n      case 'items': {\n        const nodes = NodeHelper.all(this.result!.tree.node);\n        const newItems = nodes\n          .filter(n => n.item?.guid && !this.dataService.guidMap.has(n.item.guid))\n          .map(n => n.item!);\n        return this.dataJsonService.itemsToJson(newItems);\n      }\n    }\n    return undefined;\n  }\n\n  nodeToFormNodes(mainNode: INode): Array<IFormNode> {\n    const formNodes = new Array<IFormNode>();\n\n    for (let i = 0; i < 24; i++) {\n      formNodes.push({});\n    }\n\n    const defineNode = (i: number, node: INode) => {\n      formNodes[i] = {\n        item: node.item?.guid,\n        c: node.c,\n        h: node.h,\n        ac: node.ac,\n        n: !!node.n,\n        nw: !!node.nw,\n        ne: !!node.ne\n      };\n\n      if (node.nw) { defineNode(i - 1, node.nw); }\n      if (node.n) { defineNode(i - 3, node.n); }\n      if (node.ne) { defineNode(i + 1, node.ne); }\n    };\n\n    let i = 22;\n    defineNode(i, mainNode);\n\n    return formNodes;\n  }\n\n  formNodeToNodes(node?: INode, i = 22): INode {\n    const formNode = this.formNodes[i];\n    node ??= this.formNodeToNode(formNode)!;\n    if (!formNode) { return node; }\n\n    // Left (north-west)\n    if (formNode.nw) {\n      const j = i - 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.nw = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Top (north)\n    if (formNode.n) {\n      const j = i - 3;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.n = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Right (north-east)\n    if (formNode.ne) {\n      const j = i + 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.ne = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    return node;\n  }\n\n  formNodeToNode(formNode: IFormNode): INode | undefined {\n    if (!formNode?.item) { return undefined; }\n\n    return {\n      guid: nanoid(10),\n      item: this.itemOptions.find(i => i.guid === formNode.item),\n      c: formNode.c,\n      h: formNode.h,\n      ac: formNode.ac\n    };\n  }\n\n  createHeart(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Heart',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/d/d9/Heart.png'\n    }\n  }\n\n  createBlessing(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Blessing',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/8/8e/5CandlesSpell.png'\n    }\n  }\n\n  createWingBuff(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.WingBuff,\n      name: 'Wing Buff',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/3/31/Winglight.png'\n    }\n  }\n}\n","<div>\n  Nodes<br/>\n\n  <div class=\"grid-container\">\n    <div class=\"grid-item\" *ngFor=\"let node of formNodes; let i = index;\">\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-nw\" [class.green]=\"node.nw\"\n        (click)=\"toggleConnection(node, 'nw')\">NW</div>\n      <div class=\"grid-item-connection grid-item-n\" [class.green]=\"node.n\"\n        (click)=\"toggleConnection(node, 'n')\">N</div>\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-ne\" [class.green]=\"node.ne\"\n        (click)=\"toggleConnection(node, 'ne')\">NE</div>\n\n      <div>\n        <div class=\"d-inline-block\">{{node.itemRef?.name || ''}}&nbsp;</div>\n        <div class=\"d-inline-block \"><b *ngIf=\"node.item\" (click)=\"copyNodeToClipboard(node)\">{{node.item}}</b></div>\n\n        <input (input)=\"itemInputChanged($event, i)\" (keydown)=\"itemInputEnter($event, i)\">\n      </div>\n\n      <div class=\"mt-1\">\n        <mat-icon svgIcon=\"candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.c\">\n        <mat-icon svgIcon=\"heart\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.h\">\n        <mat-icon svgIcon=\"candle\" class=\"seasonal\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.sc\">\n        <mat-icon svgIcon=\"heart\" class=\"seasonal\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.sh\">\n        <mat-icon svgIcon=\"ascended-candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.ac\">\n        <mat-icon svgIcon=\"ticket\" [inline]=\"false\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.ec\">\n      </div>\n    </div>\n  </div>\n</div>\n\n<button type=\"button\" (click)=\"submit()\">Generate</button>\n\n<div *ngIf=\"result\">\n  <button type=\"button\" (click)=\"copyToClipboard('tree')\">\n    Copy Tree\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('nodes')\">\n    Copy Nodes\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('items')\">\n    Copy Items\n  </button>\n</div>\n","<div>\n  Shop to copy: <input type=\"text\" [(ngModel)]=\"copyShopGuid\"  (ngModelChange)=\"shopGuidChanged()\"/><br/>\n  Returning IAPs: <input type=\"checkbox\" [(ngModel)]=\"returning\"/>\n  <button type=\"button\" (click)=\"submit()\">Submit</button>\n</div>\n\n<div *ngIf=\"result\">\n  <button type=\"button\" (click)=\"copyToClipboard('shop')\">\n    Copy Shop\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('iaps')\">\n    Copy IAPs\n  </button>\n</div>\n","Name\n<input type=\"text\" class=\"form-control\" placeholder=\"Name\" [(ngModel)]=\"name\">\nType\n<select class=\"form-control\" [(ngModel)]=\"type\">\n  <option *ngFor=\"let option of typeOptions\">{{option}}</option>\n</select>\nIcon\n<input type=\"text\" class=\"form-control\" placeholder=\"Icon\" [(ngModel)]=\"icon\">\n\n<button type=\"button\" class=\"btn btn-primary\" (click)=\"generate()\">Generate</button>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EditorDashboardComponent } from './components/dashboard/editor-dashboard.component';\nimport { EditorTravelingSpiritComponent } from './components/editor-traveling-spirit/editor-traveling-spirit.component';\nimport { EditorTreeComponent } from './components/editor-tree/editor-tree.component';\nimport { EditorShopComponent } from './components/editor-shop/editor-shop.component';\nimport { EditorItemComponent } from './components/editor-item/editor-item.component';\n\nconst routes: Routes = [\n  { path: '', component: EditorDashboardComponent },\n  { path: 'ts', component: EditorTravelingSpiritComponent },\n  { path: 'tree', component: EditorTreeComponent },\n  { path: 'shop', component: EditorShopComponent },\n  { path: 'item', component: EditorItemComponent },\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class EditorRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport fuzzysort from 'fuzzysort';\nimport { nanoid } from 'nanoid';\nimport { NodeHelper } from 'src/app/helpers/node-helper';\nimport { IItem, ItemType } from 'src/app/interfaces/item.interface';\nimport { INode } from 'src/app/interfaces/node.interface';\nimport { ISpiritTree } from 'src/app/interfaces/spirit-tree.interface';\nimport { DataJsonService } from 'src/app/services/data-json.service';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface IFormNode {\n  nw?: boolean;\n  n?: boolean;\n  ne?: boolean\n\n  item?: string;\n  itemRef?: IItem;\n\n  c?: number;\n  h?: number;\n  sc?: number;\n  sh?: number;\n  ac?: number;\n  ec?: number;\n}\n\n@Component({\n  selector: 'app-editor-tree-spirit',\n  templateUrl: './editor-tree.component.html',\n  styleUrls: ['./editor-tree.component.less']\n})\nexport class EditorTreeComponent implements OnInit {\n  itemOptions = new Array<IItem>();\n\n  formNodes: Array<IFormNode>;\n\n  result?: ISpiritTree;\n\n  constructor(\n    private readonly _dataService: DataService,\n    private readonly _dataJsonService: DataJsonService,\n    private readonly _route: ActivatedRoute\n  ) {\n      this.formNodes = [];\n      for (let i = 0; i < 30; i++) { this.formNodes.push({\n        n: !((i+2) % 3)\n      }); }\n  }\n\n  ngOnInit(): void {\n    this.formNodes.forEach(n => n.item = undefined);\n\n    const copyTree = this._route.snapshot.queryParams['copy'];\n    if (copyTree) {\n      const tree = this._dataService.guidMap.get(copyTree) as ISpiritTree;\n      this.formNodes = this.nodeToFormNodes(tree.node);\n    }\n\n    this.itemOptions = [];\n\n    // Add items\n    this.itemOptions.push(...this._dataService.itemConfig.items);\n\n    // Create new items\n    this.itemOptions.push({ guid: 'DON\\'T PICK', name: '-- NEW ITEMS --', type: ItemType.Special });\n    this.itemOptions.push(this.createWingBuff());\n    this.itemOptions.push(this.createHeart());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n  }\n\n  toggleConnection(node: any, direction: string) {\n    node[direction] = !node[direction];\n  }\n\n  itemInputChanged(event: Event, i: number): void {\n    const target = (event.target as HTMLInputElement);\n    const value = target?.value as string;\n    if (!value) { return; }\n\n    const jsonNode = this.getNodeFromJson(value);\n    if (jsonNode) {\n      this.formNodes[i] = jsonNode;\n      return;\n    }\n\n    const item = this._dataService.guidMap.get(value) as IItem;\n    if (!item) { return; }\n\n    this.formNodes[i].item = item.guid;\n    this.formNodes[i].itemRef = item;\n\n    target.value = '';\n    target.blur();\n  }\n\n  itemInputEnter(event: KeyboardEvent, i: number): void {\n    if (event.key !== 'Enter') { return; }  // Only handle enter key\n\n    const target = (event.target as HTMLInputElement);\n    const value = target?.value as string;\n    if (!value) { return; }\n    const results = fuzzysort.go(value, this.itemOptions, { key: 'name', limit: 1 });\n    const item = results?.[0].obj as IItem;\n    if (!item) { return; }\n\n    this.formNodes[i].item = item.guid;\n    this.formNodes[i].itemRef = item;\n\n    target.value = '';\n  }\n\n  submit(): void {\n    const baseNode = this.formNodeToNodes();\n    const nodes = NodeHelper.all(baseNode);\n\n    // Create tree\n    const tree: ISpiritTree = {\n      guid: nanoid(10),\n      node: nodes[0]\n    };\n\n    console.log('tree generated', tree);\n\n    this.result = tree;\n  }\n\n  copyToClipboard(type: string): void {\n    let value = this.getForClipboard(type);\n    if (!value) { return; }\n    const startI = value.indexOf('{');\n    const endI = value.lastIndexOf('}');\n    value = value.substring(startI, endI + 1) + ',';\n    navigator.clipboard.writeText(value);\n  }\n\n  getForClipboard(type: string): string | undefined {\n    switch (type) {\n      case 'tree':\n        return this._dataJsonService.spiritTreesToJson([this.result!]);\n      case 'nodes':\n        return this._dataJsonService.nodesToJson(NodeHelper.all(this.result!.node));\n      case 'items': {\n        const nodes = NodeHelper.all(this.result!.node);\n        const newItems = nodes\n          .filter(n => n.item?.guid && !this._dataService.guidMap.has(n.item.guid))\n          .map(n => n.item!);\n        return this._dataJsonService.itemsToJson(newItems);\n      }\n    }\n    return undefined;\n  }\n\n  nodeToFormNodes(mainNode: INode): Array<IFormNode> {\n    const formNodes = new Array<IFormNode>();\n\n    for (let i = 0; i < 30; i++) {\n      formNodes.push({});\n    }\n\n    const defineNode = (i: number, node: INode) => {\n      formNodes[i] = {\n        item: node.item?.guid,\n        itemRef: node.item,\n        c: node.c,\n        h: node.h,\n        ac: node.ac,\n        ec: node.ec,\n        sc: node.sc,\n        sh: node.sh,\n        n: !!node.n,\n        nw: !!node.nw,\n        ne: !!node.ne\n      };\n\n      if (node.nw) { defineNode(i - 1, node.nw); }\n      if (node.n) { defineNode(i - 3, node.n); }\n      if (node.ne) { defineNode(i + 1, node.ne); }\n    };\n\n    let i = 28;\n    defineNode(i, mainNode);\n\n    return formNodes;\n  }\n\n  copyNodeToClipboard(node: IFormNode): void {\n    const n = {...node};\n    delete n.itemRef;\n\n    navigator.clipboard.writeText(JSON.stringify(n));\n  }\n\n  getNodeFromJson(json: string): IFormNode | undefined {\n    try {\n      const node = JSON.parse(json) as IFormNode;\n      if (node.item) {\n        node.itemRef = this._dataService.guidMap.get(node.item) as IItem;\n      }\n\n      return node;\n    } catch { return undefined; }\n  }\n\n  formNodeToNodes(node?: INode, i = 28): INode {\n    const formNode = this.formNodes[i];\n    node ??= this.formNodeToNode(formNode)!;\n    if (!formNode) { return node; }\n\n    // Left (north-west)\n    if (formNode.nw) {\n      const j = i - 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.nw = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Top (north)\n    if (formNode.n) {\n      const j = i - 3;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.n = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Right (north-east)\n    if (formNode.ne) {\n      const j = i + 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.ne = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    return node;\n  }\n\n  formNodeToNode(formNode: IFormNode): INode | undefined {\n    if (!formNode?.item) { return undefined; }\n\n    return {\n      guid: nanoid(10),\n      item: this.itemOptions.find(i => i.guid === formNode.item),\n      c: formNode.c,\n      h: formNode.h,\n      ac: formNode.ac,\n      ec: formNode.ec,\n      sc: formNode.sc,\n      sh: formNode.sh\n    };\n  }\n\n  createHeart(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Heart',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/d/d9/Heart.png'\n    }\n  }\n\n  createBlessing(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Blessing',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/8/8e/5CandlesSpell.png'\n    }\n  }\n\n  createWingBuff(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.WingBuff,\n      name: 'Wing Buff',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/3/31/Winglight.png'\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { nanoid } from 'nanoid';\nimport { IShop } from 'src/app/interfaces/shop.interface';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: 'app-editor-shop',\n  templateUrl: './editor-shop.component.html',\n  styleUrls: ['./editor-shop.component.less']\n})\nexport class EditorShopComponent {\n  copyShopGuid?: string;\n  copyShop?: IShop;\n  returning = true;\n\n  result?: any;\n\n  constructor(\n    private readonly _dataService: DataService,\n  ) {}\n\n  shopGuidChanged(): void {\n    if (!this.copyShopGuid) { return; }\n    const shop = this._dataService.guidMap.get(this.copyShopGuid) as IShop;\n    if (!shop) { return; }\n    this.copyShop = shop;\n  }\n\n  submit(): void {\n    if (!this.copyShop) { return; }\n    // Copy IAPs\n    const iaps: Array<any> = [];\n    this.copyShop.iaps?.forEach(iap => {\n      iaps.push({\n        guid: nanoid(10),\n        name: iap.name,\n        price: iap.price,\n        returning: this.returning || undefined,\n        c: iap.c,\n        sc: iap.sc,\n        sp: iap.sp,\n        items: iap.items ? [...iap.items.map(i => i.guid)] : undefined\n      });\n    });\n\n    // Copy shop\n    const newShop = {\n      guid: nanoid(10),\n      type: this.copyShop.type,\n      spirit: this.copyShop.spirit?.guid || undefined,\n      iaps: iaps.map(iap => iap.guid)\n    };\n\n    this.result = {\n      shop: newShop,\n      iaps\n    };\n  }\n\n\n  copyToClipboard(type: string): void {\n    let value = this.getForClipboard(type);\n    if (!value) { return; }\n    let json = JSON.stringify(value, undefined, 2);\n    const startI = json.indexOf('{');\n    const endI = json.lastIndexOf('}');\n    json = json.substring(startI, endI + 1) + ',';\n    navigator.clipboard.writeText(json);\n  }\n\n  getForClipboard(type: string): Array<any> {\n    switch (type) {\n      case 'shop': return [this.result.shop];\n      case 'iaps': return this.result.iaps;\n      default: return [];\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { nanoid } from 'nanoid';\nimport { IItem, ItemType } from 'src/app/interfaces/item.interface';\n\n@Component({\n  selector: 'app-editor-item',\n  templateUrl: './editor-item.component.html',\n  styleUrls: ['./editor-item.component.less']\n})\nexport class EditorItemComponent {\n  name: string = '';\n  type: string = '';\n  icon: string = '';\n\n  typeOptions = [\n    '',\n    'Hat',\n    'Hair',\n    'Mask',\n    'FaceAccessory',\n    'Necklace',\n    'Outfit',\n    'Shoes',\n    'Cape',\n    'Instrument',\n    'Held',\n    'Prop',\n    'Emote',\n    'Stance',\n    'Call',\n    'Spell',\n    'Music',\n    'Quest',\n    'WingBuff',\n    'Special'\n  ];\n\n  generate(): void {\n    let icon = this.icon;\n    const iRevision = icon.indexOf('/revision');\n    if (iRevision >= 0) { icon = icon.substring(0, iRevision); }\n\n    const item: IItem = {\n      guid: nanoid(10),\n      name: this.name,\n      type: this.type as ItemType,\n      icon\n    }\n\n    let json = JSON.stringify(item, null, 2);\n    navigator.clipboard.writeText(json + ',');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EditorDashboardComponent } from './components/dashboard/editor-dashboard.component';\nimport { EditorRoutingModule } from './editor-routing.module';\nimport { EditorTravelingSpiritComponent } from './components/editor-traveling-spirit/editor-traveling-spirit.component';\nimport { FormsModule } from '@angular/forms';\nimport { EditorTreeComponent } from './components/editor-tree/editor-tree.component';\nimport { EditorShopComponent } from './components/editor-shop/editor-shop.component';\nimport { EditorItemComponent } from './components/editor-item/editor-item.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    EditorDashboardComponent,\n    EditorTravelingSpiritComponent,\n    EditorTreeComponent,\n    EditorShopComponent,\n    EditorItemComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatIconModule,\n    EditorRoutingModule\n  ]\n})\nexport class EditorModule { }\n"],"x_google_ignoreList":[2]}