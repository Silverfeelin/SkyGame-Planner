{"version":3,"file":"932.a4623d8e7f98ece7.js","mappings":"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","names":["EditorDashboardComponent","selectors","i0","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","DataJsonService","constructor","travelingSpiritsToJson","ts","this","stringify","map","d","date","guid","day","month","year","spirit","tree","spiritTreesToJson","trees","node","nodesToJson","nodes","item","c","h","sc","sh","ac","ec","nw","n","ne","itemsToJson","items","type","name","icon","level","array","JSON","undefined","factory","EditorTravelingSpiritComponent","dataService","dataJsonService","Array","tsCount","travelingSpiritConfig","length","spiritOptions","spiritConfig","filter","s","sort","a","b","localeCompare","lastDate","at","add","isoWeekday","format","formNodes","i","push","spiritChanged","forEach","itemOptions","lastTs","reverse","find","spiritTree","existingNodes","NodeHelper","nodeToFormNodes","ItemType","createWingBuff","createHeart","createBlessing","toggleConnection","direction","submit","tsVisits","alert","baseNode","formNodeToNodes","dayjs","Date","endDate","number","visit","console","log","result","copyToClipboard","value","getForClipboard","startI","indexOf","endI","lastIndexOf","substring","navigator","clipboard","writeText","newItems","guidMap","has","mainNode","defineNode","formNode","formNodeToNode","j","relativeNode","core","ctx","EditorTreeComponent","_dataService","_dataJsonService","_route","ngOnInit","copyTree","snapshot","queryParams","copy","get","itemConfig","itemInputChanged","event","target","jsonNode","getNodeFromJson","itemRef","blur","itemInputEnter","key","fuzzysort","limit","obj","copyNodeToClipboard","json","parse","EditorShopComponent","shopGuidChanged","copyShopGuid","shop","copyShop","iaps","iap","price","returning","sp","newShop","EditorItemComponent","generate","iRevision","routes","path","component","EditorRoutingModule","RouterModule","EditorModule","CommonModule","FormsModule","MatIconModule"],"sourceRoot":"webpack:///","sources":["./src/app/editor/components/dashboard/editor-dashboard.component.ts","./src/app/editor/components/dashboard/editor-dashboard.component.html","./node_modules/nanoid/index.browser.js","./src/app/services/data-json.service.ts","./src/app/editor/components/editor-traveling-spirit/editor-traveling-spirit.component.html","./src/app/editor/components/editor-traveling-spirit/editor-traveling-spirit.component.ts","./src/app/editor/components/editor-tree/editor-tree.component.html","./src/app/editor/components/editor-tree/editor-tree.component.ts","./src/app/editor/components/editor-shop/editor-shop.component.html","./src/app/editor/components/editor-shop/editor-shop.component.ts","./src/app/editor/components/editor-item/editor-item.component.html","./src/app/editor/components/editor-item/editor-item.component.ts","./src/app/editor/editor-routing.module.ts","./src/app/editor/editor.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-editor-dashboard',\n  templateUrl: './editor-dashboard.component.html',\n  styleUrls: ['./editor-dashboard.component.less']\n})\nexport class EditorDashboardComponent {\n\n}\n","<a [routerLink]=\"['/editor/ts']\">Create TS</a>\n<a [routerLink]=\"['/editor/tree']\">Create Spirit Tree</a>\n<a [routerLink]=\"['/editor/shop']\">Create Shop</a>\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { Injectable } from '@angular/core';\nimport dayjs from 'dayjs';\nimport { IItem } from '../interfaces/item.interface';\nimport { INode } from '../interfaces/node.interface';\nimport { ISpiritTree } from '../interfaces/spirit-tree.interface';\nimport { ITravelingSpirit } from '../interfaces/traveling-spirit.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataJsonService {\n\n  constructor() { }\n\n  travelingSpiritsToJson(ts: Array<ITravelingSpirit>): string {\n    return this.stringify(ts.map(ts => {\n      const d = ts.date;\n      return {\n        guid: ts.guid,\n        date: { day: d.date(), month: d.month() + 1, year: d.year() },\n        spirit: ts.spirit.guid,\n        tree: ts.tree.guid\n      };\n    }));\n  }\n\n  spiritTreesToJson(trees: Array<ISpiritTree>): string {\n    return this.stringify(trees.map(tree => {\n      return {\n        guid: tree.guid,\n        node: tree.node.guid\n      };\n    }));\n  }\n\n  nodesToJson(nodes: Array<INode>): string {\n    return this.stringify(nodes.map(node => {\n      return {\n        guid: node.guid,\n        item: node.item?.guid,\n        c: node.c,\n        h: node.h,\n        sc: node.sc,\n        sh: node.sh,\n        ac: node.ac,\n        ec: node.ec,\n        nw: node.nw?.guid,\n        n: node.n?.guid,\n        ne: node.ne?.guid\n      };\n    }));\n  }\n\n  itemsToJson(items: Array<IItem>): string {\n    return this.stringify(items.map(item => {\n      return {\n        guid: item.guid,\n        type: item.type,\n        name: item.name,\n        icon: item.icon,\n        level: item.level\n      };\n    }));\n  }\n\n  private stringify(array: Array<unknown>): string {\n    return JSON.stringify(array, undefined, 2);\n  }\n}\n","<div>\n  There are currently {{ tsCount }} TS registered. Add #{{ tsCount + 1 }} now.\n</div>\n\n<div>\n  Spirit:\n  <select class=\"mono\" [(ngModel)]=\"spirit\" (ngModelChange)=\"spiritChanged()\">\n    <option *ngFor=\"let option of spiritOptions\" [value]=\"option.guid\">{{ option.name }}</option>\n  </select>\n</div>\n\n<div>\n  Date:\n  <input type=\"date\" [(ngModel)]=\"date\">\n</div>\n\n<div>\n  Nodes<br/>\n\n  <div class=\"grid-container\">\n    <div class=\"grid-item\" *ngFor=\"let node of formNodes; let i = index;\">\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-nw\" [class.green]=\"node.nw\"\n        (click)=\"toggleConnection(node, 'nw')\">NW</div>\n      <div class=\"grid-item-connection grid-item-n\" [class.green]=\"node.n\"\n        (click)=\"toggleConnection(node, 'n')\">N</div>\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-ne\" [class.green]=\"node.ne\"\n        (click)=\"toggleConnection(node, 'ne')\">NE</div>\n\n      <div>\n        <select class=\"mono\" [(ngModel)]=\"node.item\">\n          <option value=\"\"></option>\n          <option *ngFor=\"let option of itemOptions\" [value]=\"option.guid\">\n            {{ option.name }}\n            <span>\n              <ng-container *ngIf=\"option.level\">({{option.level}})</ng-container>\n            </span>\n            <span>({{ option.guid }})</span>\n          </option>\n        </select>\n      </div>\n\n      <div>\n        <mat-icon svgIcon=\"candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.c\">\n        <mat-icon svgIcon=\"heart\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.h\">\n        <mat-icon svgIcon=\"ascended-candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.ac\">\n      </div>\n    </div>\n  </div>\n</div>\n\n<button type=\"button\" (click)=\"submit()\">Generate</button>\n\n<div *ngIf=\"result\">\n  <button type=\"button\" (click)=\"copyToClipboard('ts')\">\n    Copy TS\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('tree')\">\n    Copy Tree\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('nodes')\">\n    Copy Nodes\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('items')\">\n    Copy Items\n  </button>\n</div>\n","import { Component } from '@angular/core';\nimport dayjs from 'dayjs';\nimport { nanoid } from 'nanoid';\nimport { NodeHelper } from 'src/app/helpers/node-helper';\nimport { IItem, ItemType } from 'src/app/interfaces/item.interface';\nimport { INode } from 'src/app/interfaces/node.interface';\nimport { ISpiritTree } from 'src/app/interfaces/spirit-tree.interface';\nimport { ISpirit, SpiritType } from 'src/app/interfaces/spirit.interface';\nimport { ITravelingSpirit } from 'src/app/interfaces/traveling-spirit.interface';\nimport { DataJsonService } from 'src/app/services/data-json.service';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface IFormNode {\n  nw?: boolean;\n  n?: boolean;\n  ne?: boolean\n\n  item?: string;\n\n  c?: number;\n  h?: number;\n  ac?: number;\n}\n\n@Component({\n  selector: 'app-editor-traveling-spirit',\n  templateUrl: './editor-traveling-spirit.component.html',\n  styleUrls: ['./editor-traveling-spirit.component.less']\n})\nexport class EditorTravelingSpiritComponent {\n  tsCount: number;\n  spiritOptions = new Array<ISpirit>();\n  itemOptions = new Array<IItem>();\n\n  // Input\n  spirit?: string;\n  date?: string;\n\n  formNodes: Array<IFormNode>;\n\n  result?: ITravelingSpirit;\n\n  constructor(\n    private readonly dataService: DataService,\n    private readonly dataJsonService: DataJsonService\n  ) {\n      this.tsCount = dataService.travelingSpiritConfig.items.length;\n      this.spiritOptions = dataService.spiritConfig.items\n        .filter(s => s.type === 'Season')\n        .sort((a, b) => a.name.localeCompare(b.name));\n\n      const lastDate = dataService.travelingSpiritConfig.items.at(-1)!.date!;\n      this.date = lastDate.add(2, 'weeks').isoWeekday(4).format('YYYY-MM-DD');\n\n      this.formNodes = [];\n      for (let i = 0; i < 24; i++) { this.formNodes.push({\n        n: !((i+2) % 3)\n      }); }\n  }\n\n  spiritChanged(): void {\n    this.formNodes.forEach(n => n.item = undefined);\n\n    this.itemOptions = [];\n\n    // Find last nodes\n    const lastTs = [...this.dataService.travelingSpiritConfig.items].reverse().find(s => s.spirit.guid === this.spirit);\n    const spiritTree = this.dataService.spiritConfig.items.find(s => s.guid === this.spirit)?.tree;\n\n    let existingNodes: Array<INode> = [];\n\n    if (lastTs) {\n      existingNodes = NodeHelper.all(lastTs.tree.node);\n      this.formNodes = this.nodeToFormNodes(lastTs.tree.node);\n    } else if (spiritTree) {\n      // Filter out season-specifics.\n      existingNodes = NodeHelper.all(spiritTree.node).filter(s => {\n        if (s.item?.name === 'Season Heart') { return false; }\n        return true;\n      });\n    }\n\n    // Add items\n    this.itemOptions.push({ guid: 'DON\\'T PICK', name: '-- SPIRIT ITEMS --', type: ItemType.Special });\n    this.itemOptions.push(...existingNodes.filter(n => n.item).map(n => n.item!));\n\n    // Create new items\n    this.itemOptions.push({ guid: 'DON\\'T PICK', name: '-- NEW ITEMS --', type: ItemType.Special });\n    this.itemOptions.push(this.createWingBuff());\n    this.itemOptions.push(this.createHeart());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n  }\n\n  toggleConnection(node: any, direction: string) {\n    node[direction] = !node[direction];\n  }\n\n  submit(): void {\n    const spirit = this.spiritOptions.find(s => s.guid == this.spirit);\n    const tsVisits = this.dataService.travelingSpiritConfig.items.filter(ts => ts.spirit.guid === this.spirit).length;\n\n    if (!spirit) { alert('No spirit'); return; }\n\n    const baseNode = this.formNodeToNodes();\n    const nodes = NodeHelper.all(baseNode);\n\n    // Create tree\n    const tree: ISpiritTree = {\n      guid: nanoid(10),\n      node: nodes[0]\n    };\n\n    // Create ts\n    const date = dayjs(new Date(this.date!));\n    const ts: ITravelingSpirit = {\n      guid: nanoid(10),\n      date: date,\n      endDate: date.add(4, 'days'),\n      spirit,\n      tree,\n      number: this.tsCount + 1,\n      visit: tsVisits + 1\n    };\n\n    console.log('ts generated', ts);\n\n    this.result = ts;\n  }\n\n  copyToClipboard(type: string): void {\n    let value = this.getForClipboard(type);\n    if (!value) { return; }\n    const startI = value.indexOf('{');\n    const endI = value.lastIndexOf('}');\n    value = value.substring(startI, endI + 1) + ',';\n    navigator.clipboard.writeText(value);\n  }\n\ngetForClipboard(type: string): string | undefined {\n    switch (type) {\n      case 'ts':\n        return this.dataJsonService.travelingSpiritsToJson([this.result!]);\n      case 'tree':\n        return this.dataJsonService.spiritTreesToJson([this.result!.tree]);\n      case 'nodes':\n        return this.dataJsonService.nodesToJson(NodeHelper.all(this.result!.tree.node));\n      case 'items': {\n        const nodes = NodeHelper.all(this.result!.tree.node);\n        const newItems = nodes\n          .filter(n => n.item?.guid && !this.dataService.guidMap.has(n.item.guid))\n          .map(n => n.item!);\n        return this.dataJsonService.itemsToJson(newItems);\n      }\n    }\n    return undefined;\n  }\n\n  nodeToFormNodes(mainNode: INode): Array<IFormNode> {\n    const formNodes = new Array<IFormNode>();\n\n    for (let i = 0; i < 24; i++) {\n      formNodes.push({});\n    }\n\n    const defineNode = (i: number, node: INode) => {\n      formNodes[i] = {\n        item: node.item?.guid,\n        c: node.c,\n        h: node.h,\n        ac: node.ac,\n        n: !!node.n,\n        nw: !!node.nw,\n        ne: !!node.ne\n      };\n\n      if (node.nw) { defineNode(i - 1, node.nw); }\n      if (node.n) { defineNode(i - 3, node.n); }\n      if (node.ne) { defineNode(i + 1, node.ne); }\n    };\n\n    let i = 22;\n    defineNode(i, mainNode);\n\n    return formNodes;\n  }\n\n  formNodeToNodes(node?: INode, i = 22): INode {\n    const formNode = this.formNodes[i];\n    node ??= this.formNodeToNode(formNode)!;\n    if (!formNode) { return node; }\n\n    // Left (north-west)\n    if (formNode.nw) {\n      const j = i - 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.nw = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Top (north)\n    if (formNode.n) {\n      const j = i - 3;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.n = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Right (north-east)\n    if (formNode.ne) {\n      const j = i + 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.ne = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    return node;\n  }\n\n  formNodeToNode(formNode: IFormNode): INode | undefined {\n    if (!formNode?.item) { return undefined; }\n\n    return {\n      guid: nanoid(10),\n      item: this.itemOptions.find(i => i.guid === formNode.item),\n      c: formNode.c,\n      h: formNode.h,\n      ac: formNode.ac\n    };\n  }\n\n  createHeart(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Heart',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/d/d9/Heart.png'\n    }\n  }\n\n  createBlessing(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Blessing',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/8/8e/5CandlesSpell.png'\n    }\n  }\n\n  createWingBuff(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.WingBuff,\n      name: 'Wing Buff',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/3/31/Winglight.png'\n    }\n  }\n}\n","<div>\n  Nodes<br/>\n\n  <div class=\"grid-container\">\n    <div class=\"grid-item\" *ngFor=\"let node of formNodes; let i = index;\">\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-nw\" [class.green]=\"node.nw\"\n        (click)=\"toggleConnection(node, 'nw')\">NW</div>\n      <div class=\"grid-item-connection grid-item-n\" [class.green]=\"node.n\"\n        (click)=\"toggleConnection(node, 'n')\">N</div>\n      <div *ngIf=\"i%3===1\"\n        class=\"grid-item-connection grid-item-ne\" [class.green]=\"node.ne\"\n        (click)=\"toggleConnection(node, 'ne')\">NE</div>\n\n      <div>\n        <div class=\"d-inline-block\">{{node.itemRef?.name || ''}}&nbsp;</div>\n        <div class=\"d-inline-block \"><b *ngIf=\"node.item\" (click)=\"copyNodeToClipboard(node)\">{{node.item}}</b></div>\n\n        <input (input)=\"itemInputChanged($event, i)\" (keydown)=\"itemInputEnter($event, i)\">\n      </div>\n\n      <div class=\"mt-1\">\n        <mat-icon svgIcon=\"candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.c\">\n        <mat-icon svgIcon=\"heart\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.h\">\n        <mat-icon svgIcon=\"candle\" class=\"seasonal\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.sc\">\n        <mat-icon svgIcon=\"heart\" class=\"seasonal\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.sh\">\n        <mat-icon svgIcon=\"ascended-candle\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.ac\">\n        <mat-icon svgIcon=\"ticket\" [inline]=\"false\"></mat-icon>\n        <input class=\"cost\" type=\"number\" [(ngModel)]=\"node.ec\">\n      </div>\n    </div>\n  </div>\n</div>\n\n<button type=\"button\" (click)=\"submit()\">Generate</button>\n\n<div *ngIf=\"result\">\n  <button type=\"button\" (click)=\"copyToClipboard('tree')\">\n    Copy Tree\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('nodes')\">\n    Copy Nodes\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('items')\">\n    Copy Items\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport fuzzysort from 'fuzzysort';\nimport { nanoid } from 'nanoid';\nimport { NodeHelper } from 'src/app/helpers/node-helper';\nimport { IItem, ItemType } from 'src/app/interfaces/item.interface';\nimport { INode } from 'src/app/interfaces/node.interface';\nimport { ISpiritTree } from 'src/app/interfaces/spirit-tree.interface';\nimport { DataJsonService } from 'src/app/services/data-json.service';\nimport { DataService } from 'src/app/services/data.service';\n\ninterface IFormNode {\n  nw?: boolean;\n  n?: boolean;\n  ne?: boolean\n\n  item?: string;\n  itemRef?: IItem;\n\n  c?: number;\n  h?: number;\n  sc?: number;\n  sh?: number;\n  ac?: number;\n  ec?: number;\n}\n\n@Component({\n  selector: 'app-editor-tree-spirit',\n  templateUrl: './editor-tree.component.html',\n  styleUrls: ['./editor-tree.component.less']\n})\nexport class EditorTreeComponent implements OnInit {\n  itemOptions = new Array<IItem>();\n\n  formNodes: Array<IFormNode>;\n\n  result?: ISpiritTree;\n\n  constructor(\n    private readonly _dataService: DataService,\n    private readonly _dataJsonService: DataJsonService,\n    private readonly _route: ActivatedRoute\n  ) {\n      this.formNodes = [];\n      for (let i = 0; i < 30; i++) { this.formNodes.push({\n        n: !((i+2) % 3)\n      }); }\n  }\n\n  ngOnInit(): void {\n    this.formNodes.forEach(n => n.item = undefined);\n\n    const copyTree = this._route.snapshot.queryParams['copy'];\n    if (copyTree) {\n      const tree = this._dataService.guidMap.get(copyTree) as ISpiritTree;\n      this.formNodes = this.nodeToFormNodes(tree.node);\n    }\n\n    this.itemOptions = [];\n\n    // Add items\n    this.itemOptions.push(...this._dataService.itemConfig.items);\n\n    // Create new items\n    this.itemOptions.push({ guid: 'DON\\'T PICK', name: '-- NEW ITEMS --', type: ItemType.Special });\n    this.itemOptions.push(this.createWingBuff());\n    this.itemOptions.push(this.createHeart());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n    this.itemOptions.push(this.createBlessing());\n  }\n\n  toggleConnection(node: any, direction: string) {\n    node[direction] = !node[direction];\n  }\n\n  itemInputChanged(event: Event, i: number): void {\n    const target = (event.target as HTMLInputElement);\n    const value = target?.value as string;\n    if (!value) { return; }\n\n    const jsonNode = this.getNodeFromJson(value);\n    if (jsonNode) {\n      this.formNodes[i] = jsonNode;\n      return;\n    }\n\n    const item = this._dataService.guidMap.get(value) as IItem;\n    if (!item) { return; }\n\n    this.formNodes[i].item = item.guid;\n    this.formNodes[i].itemRef = item;\n\n    target.value = '';\n    target.blur();\n  }\n\n  itemInputEnter(event: KeyboardEvent, i: number): void {\n    if (event.key !== 'Enter') { return; }  // Only handle enter key\n\n    const target = (event.target as HTMLInputElement);\n    const value = target?.value as string;\n    if (!value) { return; }\n    const results = fuzzysort.go(value, this.itemOptions, { key: 'name', limit: 1 });\n    const item = results?.[0].obj as IItem;\n    if (!item) { return; }\n\n    this.formNodes[i].item = item.guid;\n    this.formNodes[i].itemRef = item;\n\n    target.value = '';\n  }\n\n  submit(): void {\n    const baseNode = this.formNodeToNodes();\n    const nodes = NodeHelper.all(baseNode);\n\n    // Create tree\n    const tree: ISpiritTree = {\n      guid: nanoid(10),\n      node: nodes[0]\n    };\n\n    console.log('tree generated', tree);\n\n    this.result = tree;\n  }\n\n  copyToClipboard(type: string): void {\n    let value = this.getForClipboard(type);\n    if (!value) { return; }\n    const startI = value.indexOf('{');\n    const endI = value.lastIndexOf('}');\n    value = value.substring(startI, endI + 1) + ',';\n    navigator.clipboard.writeText(value);\n  }\n\n  getForClipboard(type: string): string | undefined {\n    switch (type) {\n      case 'tree':\n        return this._dataJsonService.spiritTreesToJson([this.result!]);\n      case 'nodes':\n        return this._dataJsonService.nodesToJson(NodeHelper.all(this.result!.node));\n      case 'items': {\n        const nodes = NodeHelper.all(this.result!.node);\n        const newItems = nodes\n          .filter(n => n.item?.guid && !this._dataService.guidMap.has(n.item.guid))\n          .map(n => n.item!);\n        return this._dataJsonService.itemsToJson(newItems);\n      }\n    }\n    return undefined;\n  }\n\n  nodeToFormNodes(mainNode: INode): Array<IFormNode> {\n    const formNodes = new Array<IFormNode>();\n\n    for (let i = 0; i < 30; i++) {\n      formNodes.push({});\n    }\n\n    const defineNode = (i: number, node: INode) => {\n      formNodes[i] = {\n        item: node.item?.guid,\n        itemRef: node.item,\n        c: node.c,\n        h: node.h,\n        ac: node.ac,\n        ec: node.ec,\n        sc: node.sc,\n        sh: node.sh,\n        n: !!node.n,\n        nw: !!node.nw,\n        ne: !!node.ne\n      };\n\n      if (node.nw) { defineNode(i - 1, node.nw); }\n      if (node.n) { defineNode(i - 3, node.n); }\n      if (node.ne) { defineNode(i + 1, node.ne); }\n    };\n\n    let i = 28;\n    defineNode(i, mainNode);\n\n    return formNodes;\n  }\n\n  copyNodeToClipboard(node: IFormNode): void {\n    const n = {...node};\n    delete n.itemRef;\n\n    navigator.clipboard.writeText(JSON.stringify(n));\n  }\n\n  getNodeFromJson(json: string): IFormNode | undefined {\n    try {\n      const node = JSON.parse(json) as IFormNode;\n      if (node.item) {\n        node.itemRef = this._dataService.guidMap.get(node.item) as IItem;\n      }\n\n      return node;\n    } catch { return undefined; }\n  }\n\n  formNodeToNodes(node?: INode, i = 28): INode {\n    const formNode = this.formNodes[i];\n    node ??= this.formNodeToNode(formNode)!;\n    if (!formNode) { return node; }\n\n    // Left (north-west)\n    if (formNode.nw) {\n      const j = i - 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.nw = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Top (north)\n    if (formNode.n) {\n      const j = i - 3;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.n = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    // Right (north-east)\n    if (formNode.ne) {\n      const j = i + 1;\n      const relativeNode = this.formNodeToNode(this.formNodes[j]);\n      if (relativeNode) {\n        node.ne = relativeNode;\n      }\n      this.formNodeToNodes(relativeNode, j);\n    }\n\n    return node;\n  }\n\n  formNodeToNode(formNode: IFormNode): INode | undefined {\n    if (!formNode?.item) { return undefined; }\n\n    return {\n      guid: nanoid(10),\n      item: this.itemOptions.find(i => i.guid === formNode.item),\n      c: formNode.c,\n      h: formNode.h,\n      ac: formNode.ac,\n      ec: formNode.ec,\n      sc: formNode.sc,\n      sh: formNode.sh\n    };\n  }\n\n  createHeart(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Heart',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/d/d9/Heart.png'\n    }\n  }\n\n  createBlessing(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.Special,\n      name: 'Blessing',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/8/8e/5CandlesSpell.png'\n    }\n  }\n\n  createWingBuff(): IItem {\n    return {\n      guid: nanoid(10),\n      type: ItemType.WingBuff,\n      name: 'Wing Buff',\n      icon: 'https://static.wikia.nocookie.net/sky-children-of-the-light/images/3/31/Winglight.png'\n    }\n  }\n}\n","<div>\n  Shop to copy: <input type=\"text\" [(ngModel)]=\"copyShopGuid\"  (ngModelChange)=\"shopGuidChanged()\"/><br/>\n  Returning IAPs: <input type=\"checkbox\" [(ngModel)]=\"returning\"/>\n  <button type=\"button\" (click)=\"submit()\">Submit</button>\n</div>\n\n<div *ngIf=\"result\">\n  <button type=\"button\" (click)=\"copyToClipboard('shop')\">\n    Copy Shop\n  </button>\n  <button type=\"button\" (click)=\"copyToClipboard('iaps')\">\n    Copy IAPs\n  </button>\n</div>\n","import { Component } from '@angular/core';\nimport { nanoid } from 'nanoid';\nimport { IShop } from 'src/app/interfaces/shop.interface';\nimport { DataService } from 'src/app/services/data.service';\n\n@Component({\n  selector: 'app-editor-shop',\n  templateUrl: './editor-shop.component.html',\n  styleUrls: ['./editor-shop.component.less']\n})\nexport class EditorShopComponent {\n  copyShopGuid?: string;\n  copyShop?: IShop;\n  returning = true;\n\n  result?: any;\n\n  constructor(\n    private readonly _dataService: DataService,\n  ) {}\n\n  shopGuidChanged(): void {\n    if (!this.copyShopGuid) { return; }\n    const shop = this._dataService.guidMap.get(this.copyShopGuid) as IShop;\n    if (!shop) { return; }\n    this.copyShop = shop;\n  }\n\n  submit(): void {\n    if (!this.copyShop) { return; }\n    // Copy IAPs\n    const iaps: Array<any> = [];\n    this.copyShop.iaps?.forEach(iap => {\n      iaps.push({\n        guid: nanoid(10),\n        name: iap.name,\n        price: iap.price,\n        returning: this.returning || undefined,\n        c: iap.c,\n        sc: iap.sc,\n        sp: iap.sp,\n        items: iap.items ? [...iap.items.map(i => i.guid)] : undefined\n      });\n    });\n\n    // Copy shop\n    const newShop = {\n      guid: nanoid(10),\n      type: this.copyShop.type,\n      spirit: this.copyShop.spirit?.guid || undefined,\n      iaps: iaps.map(iap => iap.guid)\n    };\n\n    this.result = {\n      shop: newShop,\n      iaps\n    };\n  }\n\n\n  copyToClipboard(type: string): void {\n    let value = this.getForClipboard(type);\n    if (!value) { return; }\n    let json = JSON.stringify(value, undefined, 2);\n    const startI = json.indexOf('{');\n    const endI = json.lastIndexOf('}');\n    json = json.substring(startI, endI + 1) + ',';\n    navigator.clipboard.writeText(json);\n  }\n\n  getForClipboard(type: string): Array<any> {\n    switch (type) {\n      case 'shop': return [this.result.shop];\n      case 'iaps': return this.result.iaps;\n      default: return [];\n    }\n  }\n}\n","Name\n<input type=\"text\" class=\"form-control\" placeholder=\"Name\" [(ngModel)]=\"name\">\nType\n<select class=\"form-control\" [(ngModel)]=\"type\">\n  <option *ngFor=\"let option of typeOptions\">{{option}}</option>\n</select>\nIcon\n<input type=\"text\" class=\"form-control\" placeholder=\"Icon\" [(ngModel)]=\"icon\">\n\n<button type=\"button\" class=\"btn btn-primary\" (click)=\"generate()\">Generate</button>\n","import { Component } from '@angular/core';\nimport { nanoid } from 'nanoid';\nimport { IItem, ItemType } from 'src/app/interfaces/item.interface';\n\n@Component({\n  selector: 'app-editor-item',\n  templateUrl: './editor-item.component.html',\n  styleUrls: ['./editor-item.component.less']\n})\nexport class EditorItemComponent {\n  name: string = '';\n  type: string = '';\n  icon: string = '';\n\n  typeOptions = [\n    '',\n    'Hat',\n    'Hair',\n    'Mask',\n    'Necklace',\n    'Outfit',\n    'Shoes',\n    'Cape',\n    'Instrument',\n    'Held',\n    'Prop',\n    'Emote',\n    'Stance',\n    'Call',\n    'Spell',\n    'Music',\n    'Quest',\n    'WingBuff',\n    'Special'\n  ];\n\n  generate(): void {\n    let icon = this.icon;\n    const iRevision = icon.indexOf('/revision');\n    if (iRevision >= 0) { icon = icon.substring(0, iRevision); }\n\n    const item: IItem = {\n      guid: nanoid(10),\n      name: this.name,\n      type: this.type as ItemType,\n      icon\n    }\n\n    let json = JSON.stringify(item, null, 2);\n    navigator.clipboard.writeText(json + ',');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EditorDashboardComponent } from './components/dashboard/editor-dashboard.component';\nimport { EditorTravelingSpiritComponent } from './components/editor-traveling-spirit/editor-traveling-spirit.component';\nimport { EditorTreeComponent } from './components/editor-tree/editor-tree.component';\nimport { EditorShopComponent } from './components/editor-shop/editor-shop.component';\nimport { EditorItemComponent } from './components/editor-item/editor-item.component';\n\nconst routes: Routes = [\n  { path: '', component: EditorDashboardComponent },\n  { path: 'ts', component: EditorTravelingSpiritComponent },\n  { path: 'tree', component: EditorTreeComponent },\n  { path: 'shop', component: EditorShopComponent },\n  { path: 'item', component: EditorItemComponent },\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class EditorRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EditorDashboardComponent } from './components/dashboard/editor-dashboard.component';\nimport { EditorRoutingModule } from './editor-routing.module';\nimport { EditorTravelingSpiritComponent } from './components/editor-traveling-spirit/editor-traveling-spirit.component';\nimport { FormsModule } from '@angular/forms';\nimport { EditorTreeComponent } from './components/editor-tree/editor-tree.component';\nimport { EditorShopComponent } from './components/editor-shop/editor-shop.component';\nimport { EditorItemComponent } from './components/editor-item/editor-item.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    EditorDashboardComponent,\n    EditorTravelingSpiritComponent,\n    EditorTreeComponent,\n    EditorShopComponent,\n    EditorItemComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatIconModule,\n    EditorRoutingModule\n  ]\n})\nexport class EditorModule { }\n"],"x_google_ignoreList":[2]}